/*
 *  Copyright OpenSearch Contributors
 *  SPDX-License-Identifier: Apache-2.0
 */


import org.gradle.internal.jvm.Jvm
import org.opensearch.gradle.test.RestIntegTestTask
import org.opensearch.gradle.testclusters.OpenSearchCluster
import org.apache.tools.ant.taskdefs.condition.Os
import java.nio.file.Paths
import java.util.concurrent.Callable

/**** This entire section is boiler plate of OpenSearch plugin files. ****/
buildscript {
    ext {
        // build.version_qualifier parameter applies to knn plugin artifacts only. OpenSearch version must be set
        // explicitly as 'opensearch.version' property, for instance opensearch.version=2.0.0-rc1-SNAPSHOT
        opensearch_version = System.getProperty("opensearch.version", "3.0.0-alpha1-SNAPSHOT")
        version_qualifier = System.getProperty("build.version_qualifier", "alpha1")
        opensearch_group = "org.opensearch"
        isSnapshot = "true" == System.getProperty("build.snapshot", "true")

        version_tokens = opensearch_version.tokenize('-')
        opensearch_build = version_tokens[0] + '.0'
        plugin_no_snapshot = opensearch_build
        if (version_qualifier) {
            opensearch_build += "-${version_qualifier}"
            plugin_no_snapshot += "-${version_qualifier}"
        }
        if (isSnapshot) {
            opensearch_build += "-SNAPSHOT"
        }
        opensearch_no_snapshot = opensearch_build.replace("-SNAPSHOT","")
    }

    // This isn't applying from repositories.gradle so repeating git diff it here
    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "${opensearch_group}.gradle:build-tools:${opensearch_version}"
        configurations.all {
            resolutionStrategy {
                force("org.eclipse.platform:org.eclipse.core.runtime:4.29.0") // CVE for < 4.29
                force("org.eclipse.platform:org.eclipse.core.resources:4.20.0") // CVE for < 4.20
            }
        }
    }
}

plugins {
    id 'java-library'
    id 'java-test-fixtures'
    id 'idea'
    id "com.diffplug.spotless" version "6.25.0" apply false
    id 'io.freefair.lombok' version '8.4'
    id "de.undercouch.download" version "5.3.0"
}

apply from: 'gradle/formatting.gradle'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.rest-test'
apply plugin: 'opensearch.pluginzip'
apply plugin: 'opensearch.repositories'

allprojects {
    group = 'org.opensearch.knn'
    version = opensearch_version.tokenize('-')[0] + '.0'
    if (version_qualifier) {
        version += "-${version_qualifier}"
    }
    if (isSnapshot) {
        version += "-SNAPSHOT"
    }
    apply from: rootProject.file('build-tools/repositories.gradle').absoluteFile
    plugins.withId('java') {
        sourceCompatibility = targetCompatibility = "21"
    }

    afterEvaluate {
        project.dependencyLicenses.enabled = false
        project.thirdPartyAudit.enabled = false
        project.loggerUsageCheck.enabled = false
        project.forbiddenApis.ignoreFailures = true
        project.forbiddenPatterns {
            setEnabled(false)
        }
        project.testingConventions.enabled = false
        project.validateNebulaPom.enabled = false
        project.licenseFile = rootProject.file('LICENSE.txt')
        project.noticeFile = rootProject.file('NOTICE.txt')
        project.forbiddenApis.ignoreFailures = true
    }
}

configurations {
    zipArchive
}

publishing {
    repositories {
        maven {
            name = "Snapshots"
            url = "https://aws.oss.sonatype.org/content/repositories/snapshots"
            credentials {
                username "$System.env.SONATYPE_USERNAME"
                password "$System.env.SONATYPE_PASSWORD"
            }
        }
    }
    publications {
        pluginZip(MavenPublication) { publication ->
            pom {
                name = "opensearch-jvector"
                description = "OpenSearch jVector plugin"
                groupId = "org.opensearch.plugin"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        name = "OpenSearch"
                        url = "https://github.com/opensearch-project/opensearch-jvector-plugin"
                    }
                }
            }
        }
    }
}

/*** Setting up lombok in compiler args ***/
compileJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
}
compileTestJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
}
compileTestFixturesJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
}

/*** End of lombok setup ***/

def usingRemoteCluster = System.properties.containsKey('tests.rest.cluster') || System.properties.containsKey('tests.cluster')
def usingMultiNode = project.properties.containsKey('numNodes')
// Only apply jacoco test coverage if we are running a local single node cluster
def integTestDependOnJniLib = false
if (!usingRemoteCluster) {
    integTestDependOnJniLib = true
    if (!usingMultiNode) {
        apply from: 'build-tools/jvectorplugin-coverage.gradle'
    }
}

check.dependsOn spotlessCheck
check.dependsOn jacocoTestReport


opensearchplugin {
    name 'opensearch-jvector'
    // zip file name and plugin name in ${opensearch.plugin.name} read by OpenSearch when plugin loading
    description 'OpenSearch jVector plugin'
    classname 'org.opensearch.knn.plugin.JVectorKNNPlugin'
    extendedPlugins = ['lang-painless']
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}

tasks.named("integTest").configure {
    it.dependsOn(project.tasks.named("bundlePlugin"))
}

task release(type: Copy, group: 'build') {
    dependsOn project.tasks.build
    from(zipTree(project.tasks.bundlePlugin.outputs.files.getSingleFile()))
    into "build/plugins/opensearch-jvector"
    includeEmptyDirs = false
    eachFile { it.path = it.path - "opensearch/" }
}

/*** End of plugin boiler plate code ***/


//****************************************************************************/
// Dependencies
//****************************************************************************/
dependencies {
    api "org.opensearch:opensearch:${opensearch_version}"
    compileOnly "org.opensearch.plugin:opensearch-scripting-painless-spi:${versions.opensearch}"
    api group: 'com.google.guava', name: 'failureaccess', version:'1.0.1'
    api group: 'com.google.guava', name: 'guava', version:'32.1.3-jre'
    api group: 'commons-lang', name: 'commons-lang', version: '2.6'
    testFixturesImplementation "org.opensearch.test:framework:${opensearch_version}"
    testImplementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.15.10'
    testImplementation group: 'org.objenesis', name: 'objenesis', version: '3.3'
    testImplementation group: 'net.bytebuddy', name: 'byte-buddy-agent', version: '1.15.4'
    // json-path 2.9.0 depends on slf4j 2.0.11, which conflicts with the version used by OpenSearch core.
    // Excluding slf4j here since json-path is only used for testing, and logging failures in this context are acceptable.
    testFixturesImplementation('com.jayway.jsonpath:json-path:2.9.0') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    testFixturesImplementation "org.opensearch:common-utils:${version}"
    implementation 'com.github.oshi:oshi-core:6.4.13'

    implementation 'io.github.jbellis:jvector:4.0.0-beta.1'
    implementation 'org.agrona:agrona:1.20.0'

    api "net.java.dev.jna:jna:5.13.0"
    api "net.java.dev.jna:jna-platform:5.13.0"
    // OpenSearch core is using slf4j 1.7.36. Therefore, we cannot change the version here.
    implementation 'org.slf4j:slf4j-api:1.7.36'

    zipArchive group: 'org.opensearch.plugin', name:'opensearch-security', version: "${opensearch_build}"
}


test {
    systemProperty 'tests.security.manager', 'false'
    systemProperty 'opensearch.set.netty.runtime.available.processors', 'false'
    include '**/*Tests.class'
    testLogging.showStandardStreams = true
    systemProperty 'log4j.configurationFile', "$rootDir/src/test/resources/log4j2.properties"

    // Add this to ensure test classpath includes the main classes
    classpath += files(sourceSets.main.output.classesDirs)
    classpath += files(sourceSets.main.output.resourcesDir)
}

task integTestRemote(type: RestIntegTestTask) {
    description = "Run tests against a cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }

integTest {
    systemProperty "java.security.policy", "file://${projectDir}/src/main/plugin-metadata/plugin-security.policy"
    testLogging.showStandardStreams = true

    include '**/*IT.class'

    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
}

testClusters.integTest {
    testDistribution = "ARCHIVE"
    systemProperty "java.security.policy", "file://${projectDir}/src/main/plugin-metadata/plugin-security.policy"

    // This installs our plugin into the testClusters
    plugin(project.tasks.bundlePlugin.archiveFile)
}

run {
    useCluster testClusters.integTest
}


