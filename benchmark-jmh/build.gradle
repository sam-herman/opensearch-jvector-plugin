/*
 *  Copyright OpenSearch Contributors
 *  SPDX-License-Identifier: Apache-2.0
 */
import org.apache.tools.ant.taskdefs.condition.Os
import java.nio.file.Files

apply plugin: 'opensearch.testclusters'
apply plugin: 'opensearch.build'
apply plugin: 'opensearch.rest-test'
apply plugin: 'me.champeau.jmh'

// Disable a few tasks that come with build
build.enabled = false
integTest.enabled = false
test.enabled = false
assemble.enabled = false
dependenciesInfo.enabled = false

def awssdk_version="2.21.10"
dependencies {
    implementation project(':')
    api "org.opensearch:opensearch:${opensearch_version}"

    // Add JMH dependencies
    jmh 'org.openjdk.jmh:jmh-core:1.36'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.36'

    // Add logging dependencies
    api "org.apache.logging.log4j:log4j-api:${versions.log4j}"
    api "org.apache.logging.log4j:log4j-core:${versions.log4j}"

    // Add other dependencies from main project that are needed for benchmarks
    implementation 'io.github.jbellis:jvector:4.0.0-beta.1'
    implementation 'org.agrona:agrona:1.20.0'

    //testImplementation "org.opensearch.test:framework:${opensearch_version}"

    // Dependencies to poll datasets
    implementation 'io.jhdf:jhdf:0.6.10'

    implementation('com.indeed:util-mmap:1.0.52-3042601') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    api("software.amazon.awssdk:s3-transfer-manager:${awssdk_version}") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    api("software.amazon.awssdk:aws-crt-client:${awssdk_version}")

    api("software.amazon.awssdk:s3:${awssdk_version}")

    /*
     * Opensearch is forcing us to directly include all transitive dependencies of awssdk
     * while this is not ideal, the benefits of downloading the required datasets on-demand is better than bloating this repo by including the datasets
     */
    /**** Transitive dependencies of awssdk ****/
    api("software.amazon.awssdk.crt:aws-crt:0.27.7")
    api("software.amazon.awssdk:auth:${awssdk_version}")
    api("software.amazon.awssdk:annotations:${awssdk_version}")
    api("software.amazon.awssdk:apache-client:${awssdk_version}")
    api("software.amazon.awssdk:arns:${awssdk_version}")
    api("software.amazon.awssdk:aws-core:${awssdk_version}")
    api("software.amazon.awssdk:aws-crt-client:${awssdk_version}")
    api("software.amazon.awssdk:aws-query-protocol:${awssdk_version}")
    api("software.amazon.awssdk:aws-xml-protocol:${awssdk_version}")
    api("software.amazon.awssdk:checksums:${awssdk_version}")
    api("software.amazon.awssdk:checksums-spi:${awssdk_version}")
    api("software.amazon.awssdk:crt-core:${awssdk_version}")
    api("software.amazon.awssdk:endpoints-spi:${awssdk_version}")
    api("software.amazon.awssdk:http-auth:${awssdk_version}")
    api("software.amazon.awssdk:http-auth-aws:${awssdk_version}")
    api("software.amazon.awssdk:http-auth-spi:${awssdk_version}")
    api("software.amazon.awssdk:http-client-spi:${awssdk_version}")
    api("software.amazon.awssdk:identity-spi:${awssdk_version}")
    api("software.amazon.awssdk:json-utils:${awssdk_version}")
    api("software.amazon.awssdk:metrics-spi:${awssdk_version}")
    api("software.amazon.awssdk:netty-nio-client:${awssdk_version}")
    api("software.amazon.awssdk:profiles:${awssdk_version}")
    api("software.amazon.awssdk:protocol-core:${awssdk_version}")
    api("software.amazon.awssdk:regions:${awssdk_version}")
    api("software.amazon.awssdk:sdk-core:${awssdk_version}")
    api("software.amazon.awssdk:third-party-jackson-core:${awssdk_version}")
    api("software.amazon.awssdk:utils:${awssdk_version}")
    /*** End of transitive dependencies of awssdk ***/


    implementation platform('com.kohlschutter.junixsocket:junixsocket-core:2.8.1')
}

jmh {
    iterations = 5
    warmupIterations = 2
    fork = 1
    jvmArgs = ['-Xms2G', '-Xmx2G']
    resultFormat = 'JSON'
    resultsFile = file("${buildDir}/reports/jmh/results.json")
    humanOutputFile = file("${buildDir}/reports/jmh/human.txt")  // human readable output

    // Add these lines to handle include patterns
    if (project.hasProperty('jmhInclude')) {
        includes = [project.jmhInclude]
    }
}

// Ensure Java compatibility matches the main project
java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}